syntax = "proto3";
import "google/protobuf/duration.proto";

package chainreplication;

service Configuration {
  /// Join from new node
  rpc Join(JoinRequest) returns (NodeConfiguration);

  /// Poll for reconfiguration. Serves as a heartbeat.
  rpc Poll(PollRequest) returns (NodeConfiguration);

  // TODO: allow push of status from the node
  // From a node, notifies of a status change
  // rpc SetStatus(StatusChange) returns (NodeConfiguration);

  /// Gets all node configurations
  rpc Snapshot(ClientNodeRequest) returns (ClientConfiguration);

  // TODO: stream of changes?
}

message JoinRequest {
  /// Self-appointed node identifier
  uint64 node_id = 1;

  /// Address that is used for replicating logs
  string replication_address = 2;

  /// Address used for servicing client requests
  string client_address = 3;
}

// message StatusChange {
//     /// Node identifier
//     uint64 node_id = 1;
//     /// New status of the node
//     NodeStatus status = 2;
// }

message PollRequest {
  /// Node identifier to poll
  uint64 node_id = 1;
}

message NodeConfiguration {
  /// Metadata for the current
  Node self_node = 1;

  /// Active nodes in order
  repeated Node active_chain = 2;

  // Configured number of nodes to be considered available
  uint32 quorum = 3;

  // TODO: add catchup nodes, epoch

  // Duration of time to wait before the next poll call
  google.protobuf.Duration poll_wait = 4;
}

message ClientNodeRequest {}

message ClientConfiguration {
  /// Node to send new log entries
  repeated ClientNode nodes = 1;
}

message ClientNode {
  /// Node identifier
  uint64 id = 1;

  /// Address used for servicing client requests
  string client_address = 2;
}

message Node {
  /// Node identifier
  uint64 id = 1;
  /// Address used for replicating logs downstream
  string replication_address = 2;
}
