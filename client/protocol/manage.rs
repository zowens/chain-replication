// This file is generated by rust-protobuf 2.0.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct JoinRequest {
    // message fields
    pub replication_address: ::std::string::String,
    pub client_address: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl JoinRequest {
    pub fn new() -> JoinRequest {
        ::std::default::Default::default()
    }

    // string replication_address = 1;

    pub fn clear_replication_address(&mut self) {
        self.replication_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_replication_address(&mut self, v: ::std::string::String) {
        self.replication_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replication_address(&mut self) -> &mut ::std::string::String {
        &mut self.replication_address
    }

    // Take field
    pub fn take_replication_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.replication_address, ::std::string::String::new())
    }

    pub fn get_replication_address(&self) -> &str {
        &self.replication_address
    }

    // string client_address = 2;

    pub fn clear_client_address(&mut self) {
        self.client_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_address(&mut self, v: ::std::string::String) {
        self.client_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_address(&mut self) -> &mut ::std::string::String {
        &mut self.client_address
    }

    // Take field
    pub fn take_client_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_address, ::std::string::String::new())
    }

    pub fn get_client_address(&self) -> &str {
        &self.client_address
    }
}

impl ::protobuf::Message for JoinRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.replication_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.replication_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.replication_address);
        }
        if !self.client_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.replication_address.is_empty() {
            os.write_string(1, &self.replication_address)?;
        }
        if !self.client_address.is_empty() {
            os.write_string(2, &self.client_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinRequest {
        JoinRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "replication_address",
                    |m: &JoinRequest| { &m.replication_address },
                    |m: &mut JoinRequest| { &mut m.replication_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_address",
                    |m: &JoinRequest| { &m.client_address },
                    |m: &mut JoinRequest| { &mut m.client_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinRequest>(
                    "JoinRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinRequest {
        static mut instance: ::protobuf::lazy::Lazy<JoinRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinRequest,
        };
        unsafe {
            instance.get(JoinRequest::new)
        }
    }
}

impl ::protobuf::Clear for JoinRequest {
    fn clear(&mut self) {
        self.clear_replication_address();
        self.clear_client_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PollRequest {
    // message fields
    pub node_id: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl PollRequest {
    pub fn new() -> PollRequest {
        ::std::default::Default::default()
    }

    // uint64 node_id = 1;

    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
}

impl ::protobuf::Message for PollRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_uint64(1, self.node_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PollRequest {
        PollRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &PollRequest| { &m.node_id },
                    |m: &mut PollRequest| { &mut m.node_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PollRequest>(
                    "PollRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PollRequest {
        static mut instance: ::protobuf::lazy::Lazy<PollRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PollRequest,
        };
        unsafe {
            instance.get(PollRequest::new)
        }
    }
}

impl ::protobuf::Clear for PollRequest {
    fn clear(&mut self) {
        self.clear_node_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PollRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PollRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeConfiguration {
    // message fields
    pub node: ::protobuf::SingularPtrField<Node>,
    pub role: NodeRole,
    pub node_status: NodeStatus,
    pub upstream_node: ::protobuf::SingularPtrField<Node>,
    pub poll_wait: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NodeConfiguration {
    pub fn new() -> NodeConfiguration {
        ::std::default::Default::default()
    }

    // .chainreplication.Node node = 1;

    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> Node {
        self.node.take().unwrap_or_else(|| Node::new())
    }

    pub fn get_node(&self) -> &Node {
        self.node.as_ref().unwrap_or_else(|| Node::default_instance())
    }

    // .chainreplication.NodeRole role = 2;

    pub fn clear_role(&mut self) {
        self.role = NodeRole::HEAD;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: NodeRole) {
        self.role = v;
    }

    pub fn get_role(&self) -> NodeRole {
        self.role
    }

    // .chainreplication.NodeStatus node_status = 3;

    pub fn clear_node_status(&mut self) {
        self.node_status = NodeStatus::WAITING;
    }

    // Param is passed by value, moved
    pub fn set_node_status(&mut self, v: NodeStatus) {
        self.node_status = v;
    }

    pub fn get_node_status(&self) -> NodeStatus {
        self.node_status
    }

    // .chainreplication.Node upstream_node = 4;

    pub fn clear_upstream_node(&mut self) {
        self.upstream_node.clear();
    }

    pub fn has_upstream_node(&self) -> bool {
        self.upstream_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_node(&mut self, v: Node) {
        self.upstream_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_node(&mut self) -> &mut Node {
        if self.upstream_node.is_none() {
            self.upstream_node.set_default();
        }
        self.upstream_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_node(&mut self) -> Node {
        self.upstream_node.take().unwrap_or_else(|| Node::new())
    }

    pub fn get_upstream_node(&self) -> &Node {
        self.upstream_node.as_ref().unwrap_or_else(|| Node::default_instance())
    }

    // .google.protobuf.Duration poll_wait = 5;

    pub fn clear_poll_wait(&mut self) {
        self.poll_wait.clear();
    }

    pub fn has_poll_wait(&self) -> bool {
        self.poll_wait.is_some()
    }

    // Param is passed by value, moved
    pub fn set_poll_wait(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.poll_wait = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_poll_wait(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.poll_wait.is_none() {
            self.poll_wait.set_default();
        }
        self.poll_wait.as_mut().unwrap()
    }

    // Take field
    pub fn take_poll_wait(&mut self) -> ::protobuf::well_known_types::Duration {
        self.poll_wait.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    pub fn get_poll_wait(&self) -> &::protobuf::well_known_types::Duration {
        self.poll_wait.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Duration::default_instance())
    }
}

impl ::protobuf::Message for NodeConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.poll_wait {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.node_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_node)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.poll_wait)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.role != NodeRole::HEAD {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        if self.node_status != NodeStatus::WAITING {
            my_size += ::protobuf::rt::enum_size(3, self.node_status);
        }
        if let Some(ref v) = self.upstream_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.poll_wait.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.role != NodeRole::HEAD {
            os.write_enum(2, self.role.value())?;
        }
        if self.node_status != NodeStatus::WAITING {
            os.write_enum(3, self.node_status.value())?;
        }
        if let Some(ref v) = self.upstream_node.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.poll_wait.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeConfiguration {
        NodeConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "node",
                    |m: &NodeConfiguration| { &m.node },
                    |m: &mut NodeConfiguration| { &mut m.node },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NodeRole>>(
                    "role",
                    |m: &NodeConfiguration| { &m.role },
                    |m: &mut NodeConfiguration| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NodeStatus>>(
                    "node_status",
                    |m: &NodeConfiguration| { &m.node_status },
                    |m: &mut NodeConfiguration| { &mut m.node_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                    "upstream_node",
                    |m: &NodeConfiguration| { &m.upstream_node },
                    |m: &mut NodeConfiguration| { &mut m.upstream_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                    "poll_wait",
                    |m: &NodeConfiguration| { &m.poll_wait },
                    |m: &mut NodeConfiguration| { &mut m.poll_wait },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeConfiguration>(
                    "NodeConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<NodeConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeConfiguration,
        };
        unsafe {
            instance.get(NodeConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for NodeConfiguration {
    fn clear(&mut self) {
        self.clear_node();
        self.clear_role();
        self.clear_node_status();
        self.clear_upstream_node();
        self.clear_poll_wait();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientNodeRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClientNodeRequest {
    pub fn new() -> ClientNodeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientNodeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientNodeRequest {
        ClientNodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ClientNodeRequest>(
                    "ClientNodeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientNodeRequest {
        static mut instance: ::protobuf::lazy::Lazy<ClientNodeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientNodeRequest,
        };
        unsafe {
            instance.get(ClientNodeRequest::new)
        }
    }
}

impl ::protobuf::Clear for ClientNodeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientNodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientNodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientConfiguration {
    // message fields
    pub head_node: ::protobuf::SingularPtrField<ClientNode>,
    pub tail_node: ::protobuf::SingularPtrField<ClientNode>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClientConfiguration {
    pub fn new() -> ClientConfiguration {
        ::std::default::Default::default()
    }

    // .chainreplication.ClientNode head_node = 1;

    pub fn clear_head_node(&mut self) {
        self.head_node.clear();
    }

    pub fn has_head_node(&self) -> bool {
        self.head_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_head_node(&mut self, v: ClientNode) {
        self.head_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_head_node(&mut self) -> &mut ClientNode {
        if self.head_node.is_none() {
            self.head_node.set_default();
        }
        self.head_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_head_node(&mut self) -> ClientNode {
        self.head_node.take().unwrap_or_else(|| ClientNode::new())
    }

    pub fn get_head_node(&self) -> &ClientNode {
        self.head_node.as_ref().unwrap_or_else(|| ClientNode::default_instance())
    }

    // .chainreplication.ClientNode tail_node = 2;

    pub fn clear_tail_node(&mut self) {
        self.tail_node.clear();
    }

    pub fn has_tail_node(&self) -> bool {
        self.tail_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tail_node(&mut self, v: ClientNode) {
        self.tail_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tail_node(&mut self) -> &mut ClientNode {
        if self.tail_node.is_none() {
            self.tail_node.set_default();
        }
        self.tail_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_tail_node(&mut self) -> ClientNode {
        self.tail_node.take().unwrap_or_else(|| ClientNode::new())
    }

    pub fn get_tail_node(&self) -> &ClientNode {
        self.tail_node.as_ref().unwrap_or_else(|| ClientNode::default_instance())
    }
}

impl ::protobuf::Message for ClientConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.head_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tail_node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.head_node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tail_node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.head_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tail_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.head_node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tail_node.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConfiguration {
        ClientConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientNode>>(
                    "head_node",
                    |m: &ClientConfiguration| { &m.head_node },
                    |m: &mut ClientConfiguration| { &mut m.head_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientNode>>(
                    "tail_node",
                    |m: &ClientConfiguration| { &m.tail_node },
                    |m: &mut ClientConfiguration| { &mut m.tail_node },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientConfiguration>(
                    "ClientConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<ClientConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientConfiguration,
        };
        unsafe {
            instance.get(ClientConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for ClientConfiguration {
    fn clear(&mut self) {
        self.clear_head_node();
        self.clear_tail_node();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientNode {
    // message fields
    pub id: u64,
    pub client_address: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClientNode {
    pub fn new() -> ClientNode {
        ::std::default::Default::default()
    }

    // uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    pub fn get_id(&self) -> u64 {
        self.id
    }

    // string client_address = 2;

    pub fn clear_client_address(&mut self) {
        self.client_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_address(&mut self, v: ::std::string::String) {
        self.client_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_address(&mut self) -> &mut ::std::string::String {
        &mut self.client_address
    }

    // Take field
    pub fn take_client_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_address, ::std::string::String::new())
    }

    pub fn get_client_address(&self) -> &str {
        &self.client_address
    }
}

impl ::protobuf::Message for ClientNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.client_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.client_address.is_empty() {
            os.write_string(2, &self.client_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientNode {
        ClientNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &ClientNode| { &m.id },
                    |m: &mut ClientNode| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_address",
                    |m: &ClientNode| { &m.client_address },
                    |m: &mut ClientNode| { &mut m.client_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientNode>(
                    "ClientNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientNode {
        static mut instance: ::protobuf::lazy::Lazy<ClientNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientNode,
        };
        unsafe {
            instance.get(ClientNode::new)
        }
    }
}

impl ::protobuf::Clear for ClientNode {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_client_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    pub id: u64,
    pub replication_address: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    pub fn get_id(&self) -> u64 {
        self.id
    }

    // string replication_address = 2;

    pub fn clear_replication_address(&mut self) {
        self.replication_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_replication_address(&mut self, v: ::std::string::String) {
        self.replication_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replication_address(&mut self) -> &mut ::std::string::String {
        &mut self.replication_address
    }

    // Take field
    pub fn take_replication_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.replication_address, ::std::string::String::new())
    }

    pub fn get_replication_address(&self) -> &str {
        &self.replication_address
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.replication_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.replication_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.replication_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.replication_address.is_empty() {
            os.write_string(2, &self.replication_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &Node| { &m.id },
                    |m: &mut Node| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "replication_address",
                    |m: &Node| { &m.replication_address },
                    |m: &mut Node| { &mut m.replication_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Node>(
                    "Node",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Node {
        static mut instance: ::protobuf::lazy::Lazy<Node> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Node,
        };
        unsafe {
            instance.get(Node::new)
        }
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_replication_address();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NodeStatus {
    WAITING = 0,
    ACTIVE = 1,
}

impl ::protobuf::ProtobufEnum for NodeStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NodeStatus> {
        match value {
            0 => ::std::option::Option::Some(NodeStatus::WAITING),
            1 => ::std::option::Option::Some(NodeStatus::ACTIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NodeStatus] = &[
            NodeStatus::WAITING,
            NodeStatus::ACTIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NodeStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NodeStatus {
}

impl ::std::default::Default for NodeStatus {
    fn default() -> Self {
        NodeStatus::WAITING
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NodeRole {
    HEAD = 0,
    TAIL = 1,
    INNER = 2,
}

impl ::protobuf::ProtobufEnum for NodeRole {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NodeRole> {
        match value {
            0 => ::std::option::Option::Some(NodeRole::HEAD),
            1 => ::std::option::Option::Some(NodeRole::TAIL),
            2 => ::std::option::Option::Some(NodeRole::INNER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NodeRole] = &[
            NodeRole::HEAD,
            NodeRole::TAIL,
            NodeRole::INNER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NodeRole", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NodeRole {
}

impl ::std::default::Default for NodeRole {
    fn default() -> Self {
        NodeRole::HEAD
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeRole {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cmanage.proto\x12\x10chainreplication\x1a\x1egoogle/protobuf/durati\
    on.proto\"e\n\x0bJoinRequest\x12/\n\x13replication_address\x18\x01\x20\
    \x01(\tR\x12replicationAddress\x12%\n\x0eclient_address\x18\x02\x20\x01(\
    \tR\rclientAddress\"&\n\x0bPollRequest\x12\x17\n\x07node_id\x18\x01\x20\
    \x01(\x04R\x06nodeId\"\xa3\x02\n\x11NodeConfiguration\x12*\n\x04node\x18\
    \x01\x20\x01(\x0b2\x16.chainreplication.NodeR\x04node\x12.\n\x04role\x18\
    \x02\x20\x01(\x0e2\x1a.chainreplication.NodeRoleR\x04role\x12=\n\x0bnode\
    _status\x18\x03\x20\x01(\x0e2\x1c.chainreplication.NodeStatusR\nnodeStat\
    us\x12;\n\rupstream_node\x18\x04\x20\x01(\x0b2\x16.chainreplication.Node\
    R\x0cupstreamNode\x126\n\tpoll_wait\x18\x05\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x08pollWait\"\x13\n\x11ClientNodeRequest\"\x8b\x01\n\x13\
    ClientConfiguration\x129\n\thead_node\x18\x01\x20\x01(\x0b2\x1c.chainrep\
    lication.ClientNodeR\x08headNode\x129\n\ttail_node\x18\x02\x20\x01(\x0b2\
    \x1c.chainreplication.ClientNodeR\x08tailNode\"C\n\nClientNode\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x04R\x02id\x12%\n\x0eclient_address\x18\x02\x20\
    \x01(\tR\rclientAddress\"G\n\x04Node\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \x04R\x02id\x12/\n\x13replication_address\x18\x02\x20\x01(\tR\x12replica\
    tionAddress*%\n\nNodeStatus\x12\x0b\n\x07WAITING\x10\0\x12\n\n\x06ACTIVE\
    \x10\x01*)\n\x08NodeRole\x12\x08\n\x04HEAD\x10\0\x12\x08\n\x04TAIL\x10\
    \x01\x12\t\n\x05INNER\x10\x022\xff\x01\n\rConfiguration\x12J\n\x04Join\
    \x12\x1d.chainreplication.JoinRequest\x1a#.chainreplication.NodeConfigur\
    ation\x12J\n\x04Poll\x12\x1d.chainreplication.PollRequest\x1a#.chainrepl\
    ication.NodeConfiguration\x12V\n\x08Snapshot\x12#.chainreplication.Clien\
    tNodeRequest\x1a%.chainreplication.ClientConfigurationb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
